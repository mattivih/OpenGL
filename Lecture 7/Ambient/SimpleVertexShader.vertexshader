#version 330 core
 
layout(location=0) in vec3 vertexPosition_modelspace;
layout(location=1) in vec3 vertexNormal;
 
out vec3 fragmentColor;
 
uniform mat4 MM;
uniform mat4 VM;
uniform mat4 PV;
uniform float AmbientAmount;
uniform vec3 AmbientColor;
uniform vec3 LightDirection;
uniform vec3 LightColor;
uniform float LightAmount;
uniform mat3 IT;
uniform vec3 WorldSpaceCameraDirection;
uniform float Shininess;
uniform vec3 SpecularColor;
uniform float SpecularAmount;
 
void main()
{
    vec3 normalDirection = normalize(IT * vertexNormal);
    gl_Position = PV * VM * MM * vec4(vertexPosition_modelspace, 1);
    float nd = max(0.0, dot(normalDirection, LightDirection));
    vec3 r = reflect(LightDirection, normalDirection);
    float rv = max(0.0, dot(r, WorldSpaceCameraDirection));
    float s = 0.0;
    if(dot(normalDirection, LightDirection) > 0.0)
    {
        s = pow(rv, Shininess);
    }
    vec3 light =
        AmbientAmount * AmbientColor +
        nd * LightAmount * LightColor +
        s * SpecularColor * SpecularAmount;
    fragmentColor = vec3(0.5, 0.2, 0.1) * light;
}